# Couldn't automatically generate a config from your source code.
# This is a generic template to serve as a base for your custom config

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
orbs:
  android: circleci/android@1.0.2  # Orbを使って設定を簡単に
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  quick_check:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Androidビルド用のイメージを指定
      - image: cimg/android:2024.01
        auth:
          username: $DOCKERHUB_USERNAME  # 環境変数を参照
          password: $DOCKERHUB_PASSWORD  # 環境変数を参照
    parallelism: 1  # 並列処理を削減（4→1）
    environment:
      JAVA_HOME: /path/to/java-17
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-cache-v2-{{ checksum "**/*.gradle*" }}
            - gradle-cache-v2-
      - run:
          name: Add Google Cloud SDK repo key
          command: |
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys B53DC80D13EDEF05
      - run:
          name: Install JDK
          command: |
            wget https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_x64_linux_hotspot_17.0.2_8.tar.gz -O jdk-17.tar.gz
            sudo tar -xzf jdk-17.tar.gz -C /opt
            echo 'export JAVA_HOME=/opt/jdk-17.0.2+8' >> $BASH_ENV
            echo 'export PATH=$JAVA_HOME/bin:$PATH' >> $BASH_ENV
      - run:
          name: Verify Java Installation
          command: |
            echo $JAVA_HOME
            java -version
      - run:
          name: Set executable permission for gradlew
          command: chmod +x ./gradlew
      - run:
          name: Run quick lint check (Dev flavor only)
          command: |
            ./gradlew lintDevDebug --daemon --parallel --build-cache
      - run:
          name: Run essential tests only (Dev flavor)
          command: |
            ./gradlew testDevDebugUnitTest --daemon --parallel --build-cache
      - store_test_results:
          path: app/build/test-results
      - save_cache:
          paths:
            - ~/.gradle
            - ~/.android
          key: gradle-cache-v2-{{ checksum "**/*.gradle*" }}
  
  full_test:
    docker:
      - image: cimg/android:2024.01
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    parallelism: 2  # フルテスト時のみ並列処理
    environment:
      JAVA_HOME: /path/to/java-17
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-cache-v2-{{ checksum "**/*.gradle*" }}
            - gradle-cache-v2-
      - run:
          name: Install JDK
          command: |
            wget https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_x64_linux_hotspot_17.0.2_8.tar.gz -O jdk-17.tar.gz
            sudo tar -xzf jdk-17.tar.gz -C /opt
            echo 'export JAVA_HOME=/opt/jdk-17.0.2+8' >> $BASH_ENV
            echo 'export PATH=$JAVA_HOME/bin:$PATH' >> $BASH_ENV
      - run:
          name: Set executable permission for gradlew
          command: chmod +x ./gradlew
      - run:
          name: Run all tests
          command: |
            ./gradlew test --daemon --parallel --build-cache
      - store_test_results:
          path: app/build/test-results
      - save_cache:
          paths:
            - ~/.gradle
            - ~/.android
          key: gradle-cache-v2-{{ checksum "**/*.gradle*" }}

  build:
    docker:
      - image: cimg/android:2024.01
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-cache-v2-{{ checksum "**/*.gradle*" }}
      - run:
          name: Build Dev APK only
          command: |
            chmod +x ./gradlew
            ./gradlew assembleDevDebug --daemon --build-cache
      - store_artifacts:
          path: app/build/outputs/apk
  
  deploy:
    docker:
      - image: cimg/base:current
    steps:
      - run:
          name: deploy
          command: echo "Deploy completed"

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  # 通常のpush時は軽量チェックのみ
  commit_check:
    jobs:
      - quick_check
      - build:
          requires:
            - quick_check
          filters:
            branches:
              only: 
                - main
                - develop
  
  # PR時やタグ時はフルテスト
  full_check:
    jobs:
      - full_test:
          filters:
            branches:
              only: /pull\/.*/
      - deploy:
          requires:
            - full_test
          filters:
            tags:
              only: /^v.*/
